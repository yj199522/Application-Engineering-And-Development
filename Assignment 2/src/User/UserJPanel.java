/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package User;

import Model.Booking;
import Model.Car;
import UI.*;
import Model.Carlist;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author yashjain
 */
public class UserJPanel extends javax.swing.JPanel {

    /**
     * Creates new form UserJPanel
     */
    Carlist history;
    Booking bookHistory;
    String mc;
    Car car;
    ArrayList<Car> filterList;
    public UserJPanel(Carlist history, Booking bookHistory) {
        initComponents();
        this.history = history;
        this.bookHistory = bookHistory;
        initComponents();
        filterList = new ArrayList<Car>();
        mc = "Yes";
        filterData(false,"");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        Available = new javax.swing.JLabel();
        Brand = new javax.swing.JLabel();
        BrandTxt = new javax.swing.JTextField();
        Year = new javax.swing.JLabel();
        YearTxt = new javax.swing.JTextField();
        Serial = new javax.swing.JLabel();
        SerialNo = new javax.swing.JTextField();
        ModelNo = new javax.swing.JLabel();
        ModelNoTxt = new javax.swing.JTextField();
        City = new javax.swing.JLabel();
        CityTxt = new javax.swing.JTextField();
        MC = new javax.swing.JLabel();
        MCY = new javax.swing.JRadioButton();
        MCN = new javax.swing.JRadioButton();
        Seat = new javax.swing.JLabel();
        MinTxt = new javax.swing.JTextField();
        MaxTxt = new javax.swing.JTextField();
        Operator = new javax.swing.JLabel();
        Apply = new javax.swing.JButton();
        Reset = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        OperatorTxt = new javax.swing.JTextField();
        Model = new javax.swing.JLabel();
        ModelTxt = new javax.swing.JTextField();
        AvailableY = new javax.swing.JCheckBox();
        AvailableN = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Book = new javax.swing.JButton();
        UpdateDate = new javax.swing.JLabel();

        setBackground(new java.awt.Color(240, 248, 255));
        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(213, 217, 220), 1, true));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 83, 170));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Welcome to TopDrive");
        jLabel1.setToolTipText("");

        jSplitPane1.setBackground(new java.awt.Color(240, 248, 255));
        jSplitPane1.setBorder(null);
        jSplitPane1.setForeground(new java.awt.Color(255, 255, 255));
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel1.setBackground(new java.awt.Color(240, 248, 255));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(213, 217, 220), 1, true));

        Available.setForeground(new java.awt.Color(72, 72, 72));
        Available.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Available.setText("Car Available");

        Brand.setForeground(new java.awt.Color(72, 72, 72));
        Brand.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Brand.setText("Brand");

        BrandTxt.setForeground(new java.awt.Color(72, 72, 72));

        Year.setForeground(new java.awt.Color(72, 72, 72));
        Year.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Year.setText("Manufactured Year");

        YearTxt.setForeground(new java.awt.Color(72, 72, 72));

        Serial.setForeground(new java.awt.Color(72, 72, 72));
        Serial.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Serial.setText("Car Serial No");

        SerialNo.setForeground(new java.awt.Color(72, 72, 72));

        ModelNo.setForeground(new java.awt.Color(72, 72, 72));
        ModelNo.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        ModelNo.setText("Car Model No");

        ModelNoTxt.setForeground(new java.awt.Color(72, 72, 72));

        City.setForeground(new java.awt.Color(72, 72, 72));
        City.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        City.setText("City");

        CityTxt.setForeground(new java.awt.Color(72, 72, 72));

        MC.setForeground(new java.awt.Color(72, 72, 72));
        MC.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        MC.setText("Maintenance Certificate");
        MC.setToolTipText("");

        MCY.setForeground(new java.awt.Color(72, 72, 72));
        MCY.setSelected(true);
        MCY.setText("Yes");
        MCY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MCYActionPerformed(evt);
            }
        });

        MCN.setForeground(new java.awt.Color(72, 72, 72));
        MCN.setText("No");
        MCN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MCNActionPerformed(evt);
            }
        });

        Seat.setForeground(new java.awt.Color(72, 72, 72));
        Seat.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Seat.setText("No of Seat");
        Seat.setToolTipText("");

        MinTxt.setForeground(new java.awt.Color(72, 72, 72));
        MinTxt.setToolTipText("Min");
        MinTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MinTxtActionPerformed(evt);
            }
        });

        MaxTxt.setForeground(new java.awt.Color(72, 72, 72));
        MaxTxt.setToolTipText("Max");
        MaxTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaxTxtActionPerformed(evt);
            }
        });

        Operator.setForeground(new java.awt.Color(72, 72, 72));
        Operator.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Operator.setText("Operator");
        Operator.setToolTipText("");

        Apply.setBackground(new java.awt.Color(0, 83, 170));
        Apply.setForeground(new java.awt.Color(255, 255, 255));
        Apply.setText("APPLY");
        Apply.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Apply.setDoubleBuffered(true);
        Apply.setFocusCycleRoot(true);
        Apply.setFocusTraversalPolicyProvider(true);
        Apply.setPreferredSize(new java.awt.Dimension(129, 37));
        Apply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyActionPerformed(evt);
            }
        });

        Reset.setBackground(new java.awt.Color(0, 83, 170));
        Reset.setForeground(new java.awt.Color(255, 255, 255));
        Reset.setText("RESET");
        Reset.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Reset.setDoubleBuffered(true);
        Reset.setFocusCycleRoot(true);
        Reset.setFocusTraversalPolicyProvider(true);
        Reset.setPreferredSize(new java.awt.Dimension(129, 37));
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });

        Delete.setBackground(new java.awt.Color(0, 83, 170));
        Delete.setForeground(new java.awt.Color(255, 255, 255));
        Delete.setText("FIRST CAR AVALIABLE");
        Delete.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Delete.setDoubleBuffered(true);
        Delete.setFocusCycleRoot(true);
        Delete.setFocusTraversalPolicyProvider(true);
        Delete.setPreferredSize(new java.awt.Dimension(129, 37));
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        OperatorTxt.setForeground(new java.awt.Color(72, 72, 72));

        Model.setForeground(new java.awt.Color(72, 72, 72));
        Model.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Model.setText("Car Model");

        ModelTxt.setForeground(new java.awt.Color(72, 72, 72));
        ModelTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModelTxtActionPerformed(evt);
            }
        });

        AvailableY.setForeground(new java.awt.Color(72, 72, 72));
        AvailableY.setText("Yes");
        AvailableY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AvailableYActionPerformed(evt);
            }
        });

        AvailableN.setForeground(new java.awt.Color(72, 72, 72));
        AvailableN.setText("No");
        AvailableN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AvailableNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Available, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Brand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Year, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)))
                    .addComponent(Model, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(ModelTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                        .addComponent(YearTxt)
                        .addComponent(BrandTxt))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(AvailableY)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AvailableN)))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ModelNo, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(City, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Serial, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(ModelNoTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                            .addComponent(SerialNo, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CityTxt))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(MC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Seat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Operator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(MCY)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(MCN))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(MinTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(MaxTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(OperatorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Reset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(Apply, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 34, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Apply, Delete, Reset});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Available)
                    .addComponent(Serial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SerialNo)
                    .addComponent(MC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MCY)
                    .addComponent(MCN)
                    .addComponent(AvailableY)
                    .addComponent(AvailableN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(BrandTxt)
                        .addComponent(ModelNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ModelNoTxt)
                        .addComponent(Seat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MinTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(MaxTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Brand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Year, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(YearTxt)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(City, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(CityTxt)
                                    .addComponent(Operator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ModelTxt)
                            .addComponent(Model))
                        .addGap(44, 44, 44))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(OperatorTxt)
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Apply, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Reset, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Apply, Delete, Reset});

        jSplitPane1.setTopComponent(jPanel1);

        jPanel2.setBackground(new java.awt.Color(240, 248, 255));

        jScrollPane1.setBorder(null);
        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseClicked(evt);
            }
        });

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setFont(new java.awt.Font("Lucida Grande", 0, 13)); // NOI18N
        jTable1.setForeground(new java.awt.Color(72, 72, 72));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Brand", "Car Name", "Model No", "Serial No", "Location", "Operator", "Avaliable", "Seat", "Maintenance Certificate", "Manufacture Year"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        Book.setBackground(new java.awt.Color(0, 83, 170));
        Book.setForeground(new java.awt.Color(255, 255, 255));
        Book.setText("BOOK");
        Book.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Book.setDoubleBuffered(true);
        Book.setFocusCycleRoot(true);
        Book.setFocusTraversalPolicyProvider(true);
        Book.setPreferredSize(new java.awt.Dimension(129, 37));
        Book.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookActionPerformed(evt);
            }
        });

        UpdateDate.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        UpdateDate.setForeground(new java.awt.Color(72, 72, 72));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(UpdateDate, javax.swing.GroupLayout.PREFERRED_SIZE, 464, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Book, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 794, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 51, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Book, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UpdateDate, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 18, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 864, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jSplitPane1))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 598, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void MCYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MCYActionPerformed
        // TODO add your handling code here:
        MCY.setSelected(true);
        MCN.setSelected(false);
        mc = "Yes";
    }//GEN-LAST:event_MCYActionPerformed

    private void MCNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MCNActionPerformed
        // TODO add your handling code here:
        MCN.setSelected(true);
        MCY.setSelected(false);
        mc = "No";
    }//GEN-LAST:event_MCNActionPerformed

    private void MinTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MinTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MinTxtActionPerformed

    private void MaxTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaxTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MaxTxtActionPerformed

    private void ApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyActionPerformed
        // TODO add your handling code here:
        filterData(false,"");
    }//GEN-LAST:event_ApplyActionPerformed

    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        // TODO add your handling code here:
        BrandTxt.setText("");
        YearTxt.setText("");
        ModelTxt.setText("");
        SerialNo.setText("");
        ModelNoTxt.setText("");
        CityTxt.setText("");
        OperatorTxt.setText("");
        MaxTxt.setText("");
        MinTxt.setText("");
        AvailableY.setSelected(false);
        AvailableN.setSelected(false);
        MCY.setSelected(true);
        MCN.setSelected(false);
        mc = "Yes";
        ApplyActionPerformed(evt);
    }//GEN-LAST:event_ResetActionPerformed

    private void BookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookActionPerformed
        // TODO add your handling code here:
        int rowIndex = jTable1.getSelectedRow();
        if(rowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please Select Row from the table to delete", "Error Message",JOptionPane.ERROR_MESSAGE);
            return;
        }
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        Car selectedRow = (Car)model.getValueAt(rowIndex, 0);
        if(selectedRow.getAvaliable().equals("No")){
            JOptionPane.showMessageDialog(this, "Ride is Already Book", "Error Message",JOptionPane.ERROR_MESSAGE);
            return;
        }
        Car car = bookHistory.addCarData();
        car.setName(String.valueOf(selectedRow.getName()));
        car.setBrand(String.valueOf(selectedRow.getBrand()));
        car.setModel(String.valueOf(selectedRow.getModel()));
        car.setModelNo(String.valueOf(selectedRow.getModelNo()));
        car.setYear(Integer.parseInt(String.valueOf(selectedRow.getYear())));
        car.setLocation(String.valueOf(selectedRow.getLocation()));
        car.setSerialNo(String.valueOf(selectedRow.getSerialNo()));
        car.setOperator(String.valueOf(selectedRow.getOperator()));
        car.setAvaliable(String.valueOf(selectedRow.getAvaliable()));
        car.setMc(String.valueOf(selectedRow.getMc()));
        car.setSeat(Integer.parseInt(String.valueOf(selectedRow.getSeat())));
        
        JOptionPane.showMessageDialog(this, "Booking Done Successfully");
        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");  
        Date today = Calendar.getInstance().getTime();  
        history.setUpdateDate(dateFormat.format(today));
        filterData(false,selectedRow.getSerialNo());
    }//GEN-LAST:event_BookActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DeleteActionPerformed

    private void ModelTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModelTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ModelTxtActionPerformed

    private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane1MouseClicked

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
         int rowIndex = jTable1.getSelectedRow();
         DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
         Car selectedRow = (Car)model.getValueAt(rowIndex, 0);
         history.setSelectedView(selectedRow);
    }//GEN-LAST:event_jTable1MouseClicked

    private void AvailableYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AvailableYActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AvailableYActionPerformed

    private void AvailableNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AvailableNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AvailableNActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Apply;
    private javax.swing.JLabel Available;
    private javax.swing.JCheckBox AvailableN;
    private javax.swing.JCheckBox AvailableY;
    private javax.swing.JButton Book;
    private javax.swing.JLabel Brand;
    private javax.swing.JTextField BrandTxt;
    private javax.swing.JLabel City;
    private javax.swing.JTextField CityTxt;
    private javax.swing.JButton Delete;
    private javax.swing.JLabel MC;
    private javax.swing.JRadioButton MCN;
    private javax.swing.JRadioButton MCY;
    private javax.swing.JTextField MaxTxt;
    private javax.swing.JTextField MinTxt;
    private javax.swing.JLabel Model;
    private javax.swing.JLabel ModelNo;
    private javax.swing.JTextField ModelNoTxt;
    private javax.swing.JTextField ModelTxt;
    private javax.swing.JLabel Operator;
    private javax.swing.JTextField OperatorTxt;
    private javax.swing.JButton Reset;
    private javax.swing.JLabel Seat;
    private javax.swing.JLabel Serial;
    private javax.swing.JTextField SerialNo;
    private javax.swing.JLabel UpdateDate;
    private javax.swing.JLabel Year;
    private javax.swing.JTextField YearTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables


    private void populateTable(){
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0);
    UpdateDate.setText("Feet Catalog Last Updated At: "+ history.getUpdateDate());
    for(Car cl: history.getHistory()){
        Object[] row = new Object[11];
        row[0] = cl;
        row[1] = cl.getBrand();
        row[2] = cl.getModel();
        row[3] = cl.getModelNo();
        row[4] = cl.getSerialNo();
        row[5] = cl.getLocation();
        row[6] = cl.getOperator();
        row[7] = cl.getAvaliable();
        row[8] = cl.getSeat();
        row[9] = cl.getMc();
        row[10] = cl.getYear();
        model.addRow(row);
      }
    }
    
    private void filterTable(){
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0);
    UpdateDate.setText("Feet Catalog Last Updated At: "+ history.getUpdateDate());
    for(Car cl: filterList){
        Object[] row = new Object[11];
        row[0] = cl;
        row[1] = cl.getBrand();
        row[2] = cl.getModel();
        row[3] = cl.getModelNo();
        row[4] = cl.getSerialNo();
        row[5] = cl.getLocation();
        row[6] = cl.getOperator();
        row[7] = cl.getAvaliable();
        row[8] = cl.getSeat();
        row[9] = cl.getMc();
        row[10] = cl.getYear();
        model.addRow(row);
      }
    }

    private void filterData(boolean type, String Serials) {
        filterList = history.getHistory();
        String brand = BrandTxt.getText().toLowerCase();
        String year = YearTxt.getText().toLowerCase();
        String model = ModelTxt.getText().toLowerCase();
        String serial = SerialNo.getText().toLowerCase();
        String modelNo = ModelNoTxt.getText().toLowerCase();
        String city = CityTxt.getText().toLowerCase();
        String operator = OperatorTxt.getText().toLowerCase();
        var minSeat = 2;
        var maxSeat = 10;
        
        if(!MinTxt.getText().trim().isEmpty()){
        try {
            minSeat = Integer.parseInt(MinTxt.getText());
            } catch (NumberFormatException nfe) {
                 JOptionPane.showMessageDialog(this, "Seat Min can only be numbers", "Error Message",JOptionPane.ERROR_MESSAGE);                
                 return;
            }
         }
        
        if(!MaxTxt.getText().trim().isEmpty()){
         try {
            maxSeat = Integer.parseInt(MaxTxt.getText());
            } catch (NumberFormatException nfe) {
                 JOptionPane.showMessageDialog(this, "Seat Max can only be numbers", "Error Message",JOptionPane.ERROR_MESSAGE);                
                 return;
            }
        }
        
        if(!MinTxt.getText().trim().isEmpty() && !MaxTxt.getText().trim().isEmpty()){
            if(Integer.parseInt(MinTxt.getText()) >= Integer.parseInt(MaxTxt.getText())){
                JOptionPane.showMessageDialog(this, "Seat Min Value should not be greater than or equal to Max Value", "Error Message",JOptionPane.ERROR_MESSAGE);                
                return;
            }
        }
        
        Predicate<Car> brandName = e -> (e.getBrand().toLowerCase() == null ? brand == null : e.getBrand().toLowerCase().indexOf(brand) >= 0);
        Predicate<Car> modelYear = e -> (String.valueOf(e.getYear()) == null ? year == null : String.valueOf(e.getYear()).toLowerCase().indexOf(year) >= 0);
        Predicate<Car> Model = e -> (e.getModel().toLowerCase() == null ? model == null : e.getModel().toLowerCase().indexOf(model) >= 0);
        Predicate<Car> Serial = e -> (e.getSerialNo().toLowerCase() == null ? serial == null : e.getSerialNo().toLowerCase().indexOf(serial) >= 0);
        Predicate<Car> ModelNo = e -> (e.getModelNo().toLowerCase() == null ? modelNo == null : e.getModelNo().toLowerCase().indexOf(modelNo) >= 0);
        Predicate<Car> City = e -> (e.getLocation().toLowerCase() == null ? city == null : e.getLocation().toLowerCase().indexOf(city) >= 0);
        Predicate<Car> Operator = e -> (e.getOperator().toLowerCase() == null ? operator == null : e.getOperator().toLowerCase().indexOf(operator) >= 0);
        Predicate<Car> AvailablesY = e -> (e.getAvaliable() == null && !AvailableY.isSelected() ? null : e.getAvaliable().equals("Yes"));
        Predicate<Car> AvailablesN = e -> (e.getAvaliable() == null && !AvailableN.isSelected() ? null : e.getAvaliable().equals("No"));
        Predicate<Car> MC = e -> (e.getMc() == null ? mc == null : e.getMc().equals(mc));
        
        filterList = (ArrayList<Car>) filterList.stream()
                .filter(brandName.and(modelYear).and(Model).and(Serial).and(ModelNo).and(City).and(Operator).and(MC))
                .collect(Collectors.toList());
        
         if(!MinTxt.getText().trim().isEmpty() || !MaxTxt.getText().trim().isEmpty()){
            final var minSeats = !MinTxt.getText().trim().isEmpty()? Integer.parseInt(MinTxt.getText()) : 2;
            final var maxSeats = !MaxTxt.getText().trim().isEmpty() ? Integer.parseInt(MaxTxt.getText()) : 100;
            Predicate<Car> Seat = e -> (minSeats <= e.getSeat() && maxSeats >=e.getSeat());
            filterList = (ArrayList<Car>) filterList.stream()
                    .filter(Seat)
                    .collect(Collectors.toList());
        }
         
        if(AvailableY.isSelected() && !AvailableN.isSelected()){
             filterList = (ArrayList<Car>) filterList.stream()
                    .filter(AvailablesY)
                    .collect(Collectors.toList());
        }
        if(AvailableN.isSelected() && !AvailableY.isSelected()){
             filterList = (ArrayList<Car>) filterList.stream()
                    .filter(AvailablesN)
                    .collect(Collectors.toList());
        }
        
        if(type){
            if(!AvailableN.isSelected()){
                 ArrayList<Car> firstCar =  new ArrayList<Car>();
                firstCar.add(filterList.remove(0));
                filterList = firstCar;
            }else{
            JOptionPane.showMessageDialog(this, "No Car Available for the location", "Error Message",JOptionPane.ERROR_MESSAGE);
        }
        }
        if(!Serials.isEmpty()){
            int index = 0;
            for(Car i: filterList){
                if(i.getSerialNo().equals(Serials)){
                    i.setAvaliable("No");
                }
            }
        }
        filterTable();
    }
}
