/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Patient;

import Model.Patient;
import Model.PatientDirectory;
import Person.*;
import Model.Person;
import Model.PersonDirectory;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author yashjain
 */
public class VitalSignJPanel extends javax.swing.JPanel {

    /**
     * Creates new form BookingJPanel
     */
    PersonDirectory personList;
    PatientDirectory patientHistory;
    ArrayList<Patient> filterList;
    int normal;
    int abnormal;
    public VitalSignJPanel(PatientDirectory patientHistory, PersonDirectory personList) {
        initComponents();
        this.patientHistory = patientHistory;
        filterList = new ArrayList<Patient>();
        filterData();
//        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        FName4 = new javax.swing.JLabel();
        CityTxt = new javax.swing.JTextField();
        Reset = new javax.swing.JButton();
        Search = new javax.swing.JButton();
        FName7 = new javax.swing.JLabel();
        Test1 = new javax.swing.JCheckBox();
        Test2 = new javax.swing.JCheckBox();
        Test3 = new javax.swing.JCheckBox();
        FName9 = new javax.swing.JLabel();
        vitalList = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        NormalTxt = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        AbnormalTxt = new javax.swing.JLabel();

        setBackground(new java.awt.Color(240, 248, 255));

        jLabel2.setBackground(new java.awt.Color(240, 248, 255));
        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 83, 170));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Welcome to Life");
        jLabel2.setToolTipText("");

        jSplitPane1.setBorder(null);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel1.setBackground(new java.awt.Color(240, 248, 255));

        FName4.setForeground(new java.awt.Color(72, 72, 72));
        FName4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        FName4.setText("City");

        Reset.setBackground(new java.awt.Color(0, 83, 170));
        Reset.setForeground(new java.awt.Color(255, 255, 255));
        Reset.setText("RESET");
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });

        Search.setBackground(new java.awt.Color(0, 83, 170));
        Search.setForeground(new java.awt.Color(255, 255, 255));
        Search.setText("SEARCH");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        FName7.setForeground(new java.awt.Color(72, 72, 72));
        FName7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        FName7.setText("Community");

        Test1.setForeground(new java.awt.Color(72, 72, 72));
        Test1.setText("Test1");
        Test1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Test1ActionPerformed(evt);
            }
        });

        Test2.setForeground(new java.awt.Color(72, 72, 72));
        Test2.setText("Test2");
        Test2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Test2ActionPerformed(evt);
            }
        });

        Test3.setForeground(new java.awt.Color(72, 72, 72));
        Test3.setText("Test3");
        Test3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Test3ActionPerformed(evt);
            }
        });

        FName9.setForeground(new java.awt.Color(72, 72, 72));
        FName9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        FName9.setText("Vital Sign");

        vitalList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Item", "Heart Rate", "Blood Pressure", "Respiratory Rate", "Weight" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(FName7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FName4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(CityTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(75, 75, 75)
                        .addComponent(FName9, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(vitalList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Test1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Test2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Test3)
                        .addGap(59, 59, 59)
                        .addComponent(Reset, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Reset, Search});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FName4)
                    .addComponent(CityTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FName9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vitalList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FName7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Test1)
                    .addComponent(Test2)
                    .addComponent(Test3)
                    .addComponent(Reset, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Reset, Search});

        jSplitPane1.setTopComponent(jPanel1);

        jPanel2.setBackground(new java.awt.Color(240, 248, 255));

        jScrollPane1.setBorder(null);

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setFont(new java.awt.Font("Lucida Grande", 0, 13)); // NOI18N
        jTable1.setForeground(new java.awt.Color(72, 72, 72));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Person Id", "First Name", "Last Name", "Sex", "Age", "Age Group", "City", "Community", "Heart Rate", "Respiratory Rate", "Blood Pressure", "Weight", "Category"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 83, 170));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Total");

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 83, 170));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("Normal :");

        NormalTxt.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        NormalTxt.setForeground(new java.awt.Color(0, 83, 170));
        NormalTxt.setText("0");

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 83, 170));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel5.setText("Abnormal :");

        AbnormalTxt.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        AbnormalTxt.setForeground(new java.awt.Color(0, 83, 170));
        AbnormalTxt.setText("0");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NormalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AbnormalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 833, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(NormalTxt)
                    .addComponent(jLabel5)
                    .addComponent(AbnormalTxt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 829, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        // TODO add your handling code here:
        filterData();
    }//GEN-LAST:event_SearchActionPerformed

    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        // TODO add your handling code here:
        CityTxt.setText("");
        Test1.setSelected(false);
        Test2.setSelected(false);
        Test3.setSelected(false);
        vitalList.setSelectedIndex(0);
        SearchActionPerformed(evt);
    }//GEN-LAST:event_ResetActionPerformed

    private void Test1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Test1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Test1ActionPerformed

    private void Test2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Test2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Test2ActionPerformed

    private void Test3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Test3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Test3ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AbnormalTxt;
    private javax.swing.JTextField CityTxt;
    private javax.swing.JLabel FName4;
    private javax.swing.JLabel FName7;
    private javax.swing.JLabel FName9;
    private javax.swing.JLabel NormalTxt;
    private javax.swing.JButton Reset;
    private javax.swing.JButton Search;
    private javax.swing.JCheckBox Test1;
    private javax.swing.JCheckBox Test2;
    private javax.swing.JCheckBox Test3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox<String> vitalList;
    // End of variables declaration//GEN-END:variables
private void populateTable(){
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0);
    for(Patient cl: filterList){
        if (cl.getEncounter() == null) continue;
        Object[] row = new Object[13];
        row[0] = cl;
        row[1] = cl.getFirstName();
        row[2] = cl.getLastName();
        row[3] = cl.getSex();
        row[4] = cl.getAge();
        row[5] = cl.getAgeType();
        row[6] = cl.getCity();
        row[7] = cl.getCommunity();
        row[8] = cl.getEncounter().getVital().getHeartRate();
        row[9] = cl.getEncounter().getVital().getRespiratoryRate();
        row[10] = cl.getEncounter().getVital().getBloodPressure();
        row[11] = cl.getEncounter().getVital().getWeight();
        row[12] = cl.getEncounter().getVital().getType();
        model.addRow(row);
      }
    }

    private void filterData() {
        filterList = patientHistory.getPatientHistory();
        String city = CityTxt.getText();

        Predicate<Person> cityName = e -> (e.getCity().toLowerCase() == null ? city == null : e.getCity().toLowerCase().indexOf(city) >= 0);
        Predicate<Person> Test1s = e -> (e.getCommunity() == null && !Test1.isSelected() ? null : e.getCommunity().equals("Test1"));
        Predicate<Person> Test2s = e -> (e.getCommunity() == null && !Test2.isSelected() ? null : e.getCommunity().equals("Test2"));
        Predicate<Person> Test3s = e -> (e.getCommunity() == null && !Test3.isSelected() ? null : e.getCommunity().equals("Test3"));
        
         filterList = (ArrayList<Patient>) filterList.stream()
                .filter(cityName)
                .collect(Collectors.toList());
        if(Test1.isSelected() && !Test2.isSelected() && !Test3.isSelected()){
             filterList = (ArrayList<Patient>) filterList.stream()
                    .filter(Test1s)
                    .collect(Collectors.toList());
        }
        if(Test2.isSelected() && !Test1.isSelected() && !Test3.isSelected()){
             filterList = (ArrayList<Patient>) filterList.stream()
                    .filter(Test2s)
                    .collect(Collectors.toList());
        }
        if(Test3.isSelected() && !Test1.isSelected() && !Test2.isSelected()){
             filterList = (ArrayList<Patient>) filterList.stream()
                    .filter(Test3s)
                    .collect(Collectors.toList());
        }
      checkAbnormalNormalData();
    }

    private void checkAbnormalNormalData() {
        String selectedItem = (String) vitalList.getSelectedItem();
        normal = 0;
        abnormal = 0;
        if(filterList.isEmpty()) populateTable();
            for(Patient i: filterList){
               if(i.getEncounter() != null){
             if(selectedItem == "Select Item"){
                filterVitalSign(i);
             }else{
                isVitalSignNormal(i, selectedItem);
             }
           }
        }
        NormalTxt.setText(String.valueOf(normal));
        AbnormalTxt.setText(String.valueOf(abnormal));
    }

    private void filterVitalSign(Patient current) {
        String ageGrp = current.getAgeType();
        double currentHeartRate = current.getEncounter().getVital().getHeartRate();
        double respiratoryRate = current.getEncounter().getVital().getRespiratoryRate();
        double currentBp = current.getEncounter().getVital().getBloodPressure();
        double weight = current.getEncounter().getVital().getWeight();
        switch (ageGrp) {
            case "newBorn":
                if (respiratoryRate > 30
                        && respiratoryRate < 50
                        && currentHeartRate > 120 && currentHeartRate < 160
                        && currentBp > 50 && currentBp < 70
                        && (weight > 4.5 && weight < 7)) {
                    normal+=1;
                     current.getEncounter().getVital().setType("Normal");
                    break;
                }
                abnormal+=1;
                current.getEncounter().getVital().setType("Abnormal");
                break;
            case "infant":
                if (respiratoryRate > 20
                        && respiratoryRate < 30
                        && currentHeartRate > 80 && currentHeartRate < 140
                        && currentBp > 70 && currentBp < 100
                        && (weight > 9 && weight < 22)) {
                    normal+=1;
                    current.getEncounter().getVital().setType("Normal");
                    break;
                }
                abnormal+=1;
                 current.getEncounter().getVital().setType("Abnormal");
                break;
            case "toddler":
                if (respiratoryRate > 20
                        && respiratoryRate < 30
                        && currentHeartRate > 80 && currentHeartRate < 130
                        && currentBp > 80 && currentBp < 110
                        && (weight > 22 && weight < 31)) {
                    normal+=1;
                    current.getEncounter().getVital().setType("Normal");
                    break;
                }
                abnormal+=1;
                 current.getEncounter().getVital().setType("Abnormal");
                break;
            case "preschool":
                if (respiratoryRate > 20
                        && respiratoryRate < 30
                        && currentHeartRate > 80 && currentHeartRate < 120
                        && currentBp > 80 && currentBp < 110
                        && (weight > 31 && weight < 40)) {
                    normal+=1;
                    current.getEncounter().getVital().setType("Normal");
                    break;
                }
                abnormal+=1;
                 current.getEncounter().getVital().setType("Abnormal");
                break;
            case "school":
                if (respiratoryRate > 20
                        && respiratoryRate < 30
                        && currentHeartRate > 70 && currentHeartRate < 110
                        && currentBp > 80 && currentBp < 120
                        && (weight > 41 && weight < 92)) {
                    normal+=1;
                    current.getEncounter().getVital().setType("Normal");
                    break;
                }
                abnormal+=1;
                 current.getEncounter().getVital().setType("Abnormal");
                break;
            case "adolescent":
                if (respiratoryRate > 12
                        && respiratoryRate < 20
                        && currentHeartRate > 55 && currentHeartRate < 105
                        && currentBp > 110 && currentBp < 120
                        && (weight > 110)) {
                    normal+=1;
                    current.getEncounter().getVital().setType("Normal");
                    break;
                }
                abnormal+=1;
                current.getEncounter().getVital().setType("Abnormal");
                break;
            default:
                break;
        }
         populateTable();
    }

    private void isVitalSignNormal(Patient current, String type) {
         String ageGrp = current.getAgeType();
        double currentHeartRate = current.getEncounter().getVital().getHeartRate();
        double respiratoryRate = current.getEncounter().getVital().getRespiratoryRate();
        double currentBp = current.getEncounter().getVital().getBloodPressure();
        double weight = current.getEncounter().getVital().getWeight();
        switch (ageGrp) {
            case "newBorn":
                if (("Heart Rate".equalsIgnoreCase(type) && (currentHeartRate > 120 && currentHeartRate < 160))
                        || ("Respiratory Rate".equalsIgnoreCase(type) && (respiratoryRate > 30 && respiratoryRate < 50))
                        || ("Blood Pressure".equalsIgnoreCase(type) && (currentBp > 50 && currentBp < 70))
                        || ("Weight".equalsIgnoreCase(type)
                        && ( weight > 4.5 && weight < 7))) {
                    normal+=1;
                     current.getEncounter().getVital().setType("Normal");
                    break;
                }
                 abnormal+=1;
                current.getEncounter().getVital().setType("Abnormal");
                break;
            case "infant":
                if (("Heart Rate".equalsIgnoreCase(type) && (currentHeartRate > 80 && currentHeartRate < 140))
                        || ("Respiratory Rate".equalsIgnoreCase(type) && (respiratoryRate > 20 && respiratoryRate < 30))
                        || ("Blood Pressure".equalsIgnoreCase(type) && (currentBp > 70 && currentBp < 100))
                        || ("Weight".equalsIgnoreCase(type)
                        && (weight > 9 && weight < 22))) {
                    normal+=1;
                     current.getEncounter().getVital().setType("Normal");
                    break;
                }
                 abnormal+=1;
                current.getEncounter().getVital().setType("Abnormal");
                break;
            case "toddler":
                System.out.println("inside todder..");
                if (("Blood Pressure".equalsIgnoreCase(type) && (currentBp > 80 && currentBp < 110))
                        || ("Heart Rate".equalsIgnoreCase(type) && (currentHeartRate > 80 && currentHeartRate < 130))
                        || ("Respiratory Rate".equalsIgnoreCase(type) && (respiratoryRate > 20 && respiratoryRate < 30))
                        || ("Weight".equalsIgnoreCase(type)
                        && (weight > 22 && weight < 31))) {
                    normal+=1;
                     current.getEncounter().getVital().setType("Normal");
                    break;
                }
                 abnormal+=1;
                current.getEncounter().getVital().setType("Abnormal");
                break;
            case "preschool":
                if (("Heart Rate".equalsIgnoreCase(type) && (currentHeartRate > 80 && currentHeartRate < 120))
                        || ("Respiratory Rate".equalsIgnoreCase(type) && (respiratoryRate > 20 && respiratoryRate < 30))
                        || ("Blood Pressure".equalsIgnoreCase(type) && (currentBp > 80 && currentBp < 110))
                        || ("Weight".equalsIgnoreCase(type)
                        && (weight > 31 && weight < 40))) {
                    normal+=1;
                     current.getEncounter().getVital().setType("Normal");
                    break;
                }
                 abnormal+=1;
                current.getEncounter().getVital().setType("Abnormal");
                break;
            case "school":
                if (("Heart Rate".equalsIgnoreCase(type) && (currentHeartRate > 70 && currentHeartRate < 110))
                        || ("Respiratory Rate".equalsIgnoreCase(type) && (respiratoryRate > 20 && respiratoryRate < 30))
                        || ("Blood Pressure".equalsIgnoreCase(type) && (currentBp > 80 && currentBp < 120))
                        || ("Weight".equalsIgnoreCase(type)
                        && (weight > 41 && weight < 92))) {
                    normal+=1;
                     current.getEncounter().getVital().setType("Normal");
                    break;
                }
                 abnormal+=1;
                current.getEncounter().getVital().setType("Abnormal");
                break;
            case "adolescent":
                if (("Heart Rate".equalsIgnoreCase(type) && (currentHeartRate > 55 && currentHeartRate < 105))
                        || ("Respiratory Rate".equalsIgnoreCase(type) && (respiratoryRate > 12 && respiratoryRate < 20))
                        || ("Blood Pressure".equalsIgnoreCase(type) && (currentBp > 110 && currentBp < 120))
                        || ("Weight".equalsIgnoreCase(type)
                        && (weight > 110))) {
                    normal+=1;
                     current.getEncounter().getVital().setType("Normal");
                    break;
                }
                 abnormal+=1;
                current.getEncounter().getVital().setType("Abnormal");
                break;
            default:
                System.out.println("Incorrect input.....");
                break;
        }
         populateTable();
    }
}
