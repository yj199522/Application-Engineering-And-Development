/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Person;

import Model.Patient;
import Model.PatientDirectory;
import Model.Person;
import Model.PersonDirectory;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author yashjain
 */
public class ViewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form BookingJPanel
     */
    PersonDirectory personList;
    PatientDirectory patientHistory;
    String sex = "Male";
    String community = "Test1";
    ArrayList<Person> filterList;
    public ViewJPanel(PersonDirectory personList, PatientDirectory patientHistory) {
        initComponents();
        this.personList = personList;
        this.patientHistory = patientHistory;
        filterList = new ArrayList<Person>();
        filterData();
//        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        FName = new javax.swing.JLabel();
        FNameTxt = new javax.swing.JTextField();
        FName1 = new javax.swing.JLabel();
        LNameTxt = new javax.swing.JTextField();
        FName2 = new javax.swing.JLabel();
        PIDTxt = new javax.swing.JTextField();
        FName3 = new javax.swing.JLabel();
        ContactTxt = new javax.swing.JTextField();
        FName4 = new javax.swing.JLabel();
        CityTxt = new javax.swing.JTextField();
        FName5 = new javax.swing.JLabel();
        FName6 = new javax.swing.JLabel();
        AgeMinTxt = new javax.swing.JTextField();
        AgeMaxTxt = new javax.swing.JTextField();
        Reset = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Search = new javax.swing.JButton();
        FName7 = new javax.swing.JLabel();
        Male = new javax.swing.JCheckBox();
        Female = new javax.swing.JCheckBox();
        Test1 = new javax.swing.JCheckBox();
        Test2 = new javax.swing.JCheckBox();
        Test3 = new javax.swing.JCheckBox();
        FName8 = new javax.swing.JLabel();
        Patient = new javax.swing.JCheckBox();
        NotPatient = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setBackground(new java.awt.Color(240, 248, 255));

        jLabel2.setBackground(new java.awt.Color(240, 248, 255));
        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 83, 170));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Welcome to Life");
        jLabel2.setToolTipText("");

        jSplitPane1.setBorder(null);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel1.setBackground(new java.awt.Color(240, 248, 255));

        FName.setForeground(new java.awt.Color(72, 72, 72));
        FName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        FName.setText("First Name");

        FName1.setForeground(new java.awt.Color(72, 72, 72));
        FName1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        FName1.setText("Last Name");

        LNameTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LNameTxtActionPerformed(evt);
            }
        });

        FName2.setForeground(new java.awt.Color(72, 72, 72));
        FName2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        FName2.setText("Person ID");

        FName3.setForeground(new java.awt.Color(72, 72, 72));
        FName3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        FName3.setText("Contact No");

        FName4.setForeground(new java.awt.Color(72, 72, 72));
        FName4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        FName4.setText("City");

        FName5.setForeground(new java.awt.Color(72, 72, 72));
        FName5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        FName5.setText("Sex");

        FName6.setForeground(new java.awt.Color(72, 72, 72));
        FName6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        FName6.setText("Age");

        Reset.setBackground(new java.awt.Color(0, 83, 170));
        Reset.setForeground(new java.awt.Color(255, 255, 255));
        Reset.setText("RESET");
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });

        Delete.setBackground(new java.awt.Color(0, 83, 170));
        Delete.setForeground(new java.awt.Color(255, 255, 255));
        Delete.setText("DELETE");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        Search.setBackground(new java.awt.Color(0, 83, 170));
        Search.setForeground(new java.awt.Color(255, 255, 255));
        Search.setText("SEARCH");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        FName7.setForeground(new java.awt.Color(72, 72, 72));
        FName7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        FName7.setText("Community");

        Male.setForeground(new java.awt.Color(72, 72, 72));
        Male.setText("Male");
        Male.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaleActionPerformed(evt);
            }
        });

        Female.setForeground(new java.awt.Color(72, 72, 72));
        Female.setText("Female");
        Female.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FemaleActionPerformed(evt);
            }
        });

        Test1.setForeground(new java.awt.Color(72, 72, 72));
        Test1.setText("Test1");
        Test1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Test1ActionPerformed(evt);
            }
        });

        Test2.setForeground(new java.awt.Color(72, 72, 72));
        Test2.setText("Test2");
        Test2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Test2ActionPerformed(evt);
            }
        });

        Test3.setForeground(new java.awt.Color(72, 72, 72));
        Test3.setText("Test3");
        Test3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Test3ActionPerformed(evt);
            }
        });

        FName8.setForeground(new java.awt.Color(72, 72, 72));
        FName8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        FName8.setText("Type");

        Patient.setForeground(new java.awt.Color(72, 72, 72));
        Patient.setText("Patient");
        Patient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PatientActionPerformed(evt);
            }
        });

        NotPatient.setForeground(new java.awt.Color(72, 72, 72));
        NotPatient.setText("Non Patient");
        NotPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NotPatientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FName2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(FName1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE))))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(PIDTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(83, 83, 83)
                                .addComponent(Reset, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(FName7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(LNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(FName4, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(FNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(FName3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 0, 0)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CityTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ContactTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(FName6, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(FName5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(Male)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Female))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(AgeMinTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(AgeMaxTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(61, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Test1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Test2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Test3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FName8, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Patient)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(NotPatient)
                                .addGap(0, 23, Short.MAX_VALUE))))))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Delete, Reset, Search});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FName)
                    .addComponent(FNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FName3)
                    .addComponent(ContactTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FName5)
                    .addComponent(Male)
                    .addComponent(Female))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FName1)
                    .addComponent(FName4)
                    .addComponent(CityTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FName6)
                    .addComponent(LNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AgeMinTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AgeMaxTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FName2)
                    .addComponent(PIDTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FName7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Test1)
                    .addComponent(Test2)
                    .addComponent(Test3)
                    .addComponent(FName8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Patient)
                    .addComponent(NotPatient))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Reset, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Delete, Reset, Search});

        jSplitPane1.setTopComponent(jPanel1);

        jPanel2.setBackground(new java.awt.Color(240, 248, 255));

        jScrollPane1.setBorder(null);

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setFont(new java.awt.Font("Lucida Grande", 0, 13)); // NOI18N
        jTable1.setForeground(new java.awt.Color(72, 72, 72));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Person Id", "First Name", "Last Name", "Sex", "Age", "Age Group", "Contact No", "Address", "City", "Community", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 861, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setRightComponent(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 829, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void LNameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LNameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LNameTxtActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        // TODO add your handling code here:
        filterData();
    }//GEN-LAST:event_SearchActionPerformed

    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        // TODO add your handling code here:
        FNameTxt.setText("");
        LNameTxt.setText("");
        PIDTxt.setText("");
        ContactTxt.setText("");
        CityTxt.setText("");
        AgeMinTxt.setText("");
        AgeMaxTxt.setText("");
        Test1.setSelected(false);
        Test2.setSelected(false);
        Test3.setSelected(false);
        Male.setSelected(false);
        Female.setSelected(false);
        NotPatient.setSelected(false);
        Patient.setSelected(false);
        SearchActionPerformed(evt);
    }//GEN-LAST:event_ResetActionPerformed

    private void MaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MaleActionPerformed

    private void FemaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FemaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FemaleActionPerformed

    private void Test1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Test1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Test1ActionPerformed

    private void Test2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Test2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Test2ActionPerformed

    private void Test3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Test3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Test3ActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here:
        int rowIndex = jTable1.getSelectedRow();
        if(rowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please Select Row from the table to delete", "Error Message",JOptionPane.ERROR_MESSAGE);
            return;
        }
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        Person selectedRow = (Person)model.getValueAt(rowIndex, 0);
        rowIndex = 0;
        Patient patient = null;
             for(Patient i: patientHistory.getPatientHistory()){
                if(selectedRow.getPersonId() == i.getPersonId()){
                    patient = i;
                    break;
                }
                rowIndex++;
            }
             
        JOptionPane.showMessageDialog(this, "Data Deleted Successfully");
        if(patient != null) patientHistory.deleteData(patient);
        personList.deleteData(selectedRow);
        SearchActionPerformed(evt);
    }//GEN-LAST:event_DeleteActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int rowIndex = jTable1.getSelectedRow();
         DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
         Person selectedRow = (Person)model.getValueAt(rowIndex, 0);
         personList.setSelectedView(selectedRow);
    }//GEN-LAST:event_jTable1MouseClicked

    private void PatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PatientActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PatientActionPerformed

    private void NotPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NotPatientActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NotPatientActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AgeMaxTxt;
    private javax.swing.JTextField AgeMinTxt;
    private javax.swing.JTextField CityTxt;
    private javax.swing.JTextField ContactTxt;
    private javax.swing.JButton Delete;
    private javax.swing.JLabel FName;
    private javax.swing.JLabel FName1;
    private javax.swing.JLabel FName2;
    private javax.swing.JLabel FName3;
    private javax.swing.JLabel FName4;
    private javax.swing.JLabel FName5;
    private javax.swing.JLabel FName6;
    private javax.swing.JLabel FName7;
    private javax.swing.JLabel FName8;
    private javax.swing.JTextField FNameTxt;
    private javax.swing.JCheckBox Female;
    private javax.swing.JTextField LNameTxt;
    private javax.swing.JCheckBox Male;
    private javax.swing.JCheckBox NotPatient;
    private javax.swing.JTextField PIDTxt;
    private javax.swing.JCheckBox Patient;
    private javax.swing.JButton Reset;
    private javax.swing.JButton Search;
    private javax.swing.JCheckBox Test1;
    private javax.swing.JCheckBox Test2;
    private javax.swing.JCheckBox Test3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
private void populateTable(){
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0);
    for(Person cl: filterList){
        Object[] row = new Object[11];
        row[0] = cl;
        row[1] = cl.getFirstName();
        row[2] = cl.getLastName();
        row[3] = cl.getSex();
        row[4] = cl.getAge();
        row[5] = cl.getAgeType();
        row[6] = cl.getContact();
        row[7] = cl.getHouse();
        row[8] = cl.getCity();
        row[9] = cl.getCommunity();
        row[10] = cl.getType();
        model.addRow(row);
      }
    }

    private void filterData() {
        filterList = personList.getPersonHistory();
          String firstName = FNameTxt.getText();
          String lastName = LNameTxt.getText();
          int ageMin = 0;
          int ageMax = 100;
          String city = CityTxt.getText();
          String personId = PIDTxt.getText();
          long contact = 0l;
          
           if(!AgeMinTxt.getText().trim().isEmpty()){
            try {
                ageMin = Integer.parseInt(AgeMinTxt.getText());
                } catch (NumberFormatException nfe) {
                     JOptionPane.showMessageDialog(this, "Age Min can only be numbers", "Error Message",JOptionPane.ERROR_MESSAGE);                
                     return;
                }
             }

            if(!AgeMaxTxt.getText().trim().isEmpty()){
             try {
                ageMax = Integer.parseInt(AgeMaxTxt.getText());
                } catch (NumberFormatException nfe) {
                     JOptionPane.showMessageDialog(this, "Age Max can only be numbers", "Error Message",JOptionPane.ERROR_MESSAGE);                
                     return;
                }
            }
            
            if(!AgeMinTxt.getText().trim().isEmpty() && !AgeMaxTxt.getText().trim().isEmpty()){
            if(Integer.parseInt(AgeMinTxt.getText()) >= Integer.parseInt(AgeMaxTxt.getText())){
                JOptionPane.showMessageDialog(this, "Seat Min Value should not be greater than or equal to Max Value", "Error Message",JOptionPane.ERROR_MESSAGE);                
                return;
            }
        }
        
        Predicate<Person> fname = e -> (e.getFirstName().toLowerCase() == null ? firstName == null : e.getFirstName().toLowerCase().indexOf(firstName) >= 0);
        Predicate<Person> lname = e -> (e.getLastName().toLowerCase() == null ? lastName == null : e.getLastName().toLowerCase().indexOf(lastName) >= 0);
        Predicate<Person> cityName = e -> (e.getCity().toLowerCase() == null ? city == null : e.getCity().toLowerCase().indexOf(city) >= 0);
        Predicate<Person> Id = e -> (e.getPersonId().toLowerCase() == null ? personId == null : e.getPersonId().toLowerCase().indexOf(personId) >= 0);
        Predicate<Person> Males = e -> (e.getSex() == null && !Male.isSelected() ? null : e.getSex().equals("Male"));
        Predicate<Person> Females = e -> (e.getSex() == null && !Female.isSelected() ? null : e.getSex().equals("Female"));
        Predicate<Person> Test1s = e -> (e.getCommunity() == null && !Test1.isSelected() ? null : e.getCommunity().equals("Test1"));
        Predicate<Person> Test2s = e -> (e.getCommunity() == null && !Test2.isSelected() ? null : e.getCommunity().equals("Test2"));
        Predicate<Person> Test3s = e -> (e.getCommunity() == null && !Test3.isSelected() ? null : e.getCommunity().equals("Test3"));
        Predicate<Person> Patients = e -> (e.getType()== null && !Patient.isSelected() ? null : e.getType().equals("Patient"));
        Predicate<Person> NotPatients = e -> (e.getType()== null && !NotPatient.isSelected() ? null : e.getType().equals("Non Patient"));
        
         filterList = (ArrayList<Person>) filterList.stream()
                .filter(fname.and(lname).and(cityName).and(Id))
                .collect(Collectors.toList());
        if(!AgeMinTxt.getText().trim().isEmpty() || !AgeMaxTxt.getText().trim().isEmpty()){
            final var minSeats = !AgeMinTxt.getText().trim().isEmpty()? Integer.parseInt(AgeMinTxt.getText()) : 2;
            final var maxSeats = !AgeMaxTxt.getText().trim().isEmpty() ? Integer.parseInt(AgeMaxTxt.getText()) : 100;
            Predicate<Person> Seat = e -> (minSeats <= e.getAge() && maxSeats >=e.getAge());
            filterList = (ArrayList<Person>) filterList.stream()
                    .filter(Seat)
                    .collect(Collectors.toList());
        }
        
        if(Male.isSelected() && !Female.isSelected()){
             filterList = (ArrayList<Person>) filterList.stream()
                    .filter(Males)
                    .collect(Collectors.toList());
        }
        if(Female.isSelected() && !Male.isSelected()){
             filterList = (ArrayList<Person>) filterList.stream()
                    .filter(Females)
                    .collect(Collectors.toList());
        }
        if(Test1.isSelected() && !Test2.isSelected() && !Test3.isSelected()){
             filterList = (ArrayList<Person>) filterList.stream()
                    .filter(Test1s)
                    .collect(Collectors.toList());
        }
        if(Test2.isSelected() && !Test1.isSelected() && !Test3.isSelected()){
             filterList = (ArrayList<Person>) filterList.stream()
                    .filter(Test2s)
                    .collect(Collectors.toList());
        }
        if(Test3.isSelected() && !Test1.isSelected() && !Test2.isSelected()){
             filterList = (ArrayList<Person>) filterList.stream()
                    .filter(Test3s)
                    .collect(Collectors.toList());
        }
        if(Patient.isSelected() && !NotPatient.isSelected()){
             filterList = (ArrayList<Person>) filterList.stream()
                    .filter(Patients)
                    .collect(Collectors.toList());
        }
        if(NotPatient.isSelected() && !Patient.isSelected()){
             filterList = (ArrayList<Person>) filterList.stream()
                    .filter(NotPatients)
                    .collect(Collectors.toList());
        }
      populateTable();
    }
}
