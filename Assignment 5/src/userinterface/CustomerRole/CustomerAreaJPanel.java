/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CustomerRole;

import Business.Customer.Customer;
import Business.EcoSystem;

import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class CustomerAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    EcoSystem ecosystem;
    DefaultTableModel model1;
    private UserAccount userAccount;
    DefaultTableModel model;
    Customer cust;

    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    public CustomerAreaJPanel(JPanel userProcessContainer, UserAccount account, EcoSystem system) {
        initComponents();

        this.userProcessContainer = userProcessContainer;

        this.userAccount = account;
        this.userProcessContainer = userProcessContainer;
        ecosystem = system;
        model = new DefaultTableModel();
        model1 = new DefaultTableModel();
        restListTable.setModel(model);
        orderTable.setModel(model1);
        cust = findCustomer();
        model.addColumn("Name");
        model.addColumn("Location");
        model.addColumn("Phone No");
        model1.addColumn("Id");
        model1.addColumn("Status");
        model1.addColumn("Restaurant Name");
        model1.addColumn("Delivery Name");
        model1.addColumn("FeedBack");
        model1.addColumn("Comment");
        populateRequestTable();
        populateCustomerOrders();
    }

    public Customer findCustomer() {
        for (int i = 0; i < ecosystem.getCustomerDirectory().getCustomerList().size(); i++) {
            if (ecosystem.getCustomerDirectory().getCustomerList().get(i).getAccountDetails().getUsername().equals(this.userAccount.getUsername())) {
                return ecosystem.getCustomerDirectory().getCustomerList().get(i);
            }
        }
        return null;
    }

    public void populateCustomerCart() {
        Customer cust = findCustomer();
        for (int i = model1.getRowCount() - 1; i >= 0; i--) {
            model1.removeRow(i);
        }
        if (cust.getOrderList().size() > 0) {
            for (int i = 0; i < cust.getOrderList().size(); i++) {
                model1.addRow(new Object[]{
                    cust.getOrderList().get(i).getItem(),
                    cust.getOrderList().get(i).getPrice(),
                    cust.getOrderList().get(i).getQuantity(),});
            }
        }
    }

    public void populateCustomerOrders() {
        for (int i = model1.getRowCount() - 1; i >= 0; i--) {
            model1.removeRow(i);
        }
        for (int i = 0; i < cust.getOrderDirectoryList().size(); i++) {
            model1.addRow(new Object[]{
                cust.getOrderDirectoryList().get(i).getId(),
                cust.getOrderDirectoryList().get(i).getStatus(),
                cust.getOrderDirectoryList().get(i).getRestaurant().getName(),
                cust.getOrderDirectoryList().get(i).getDeliveryMan().getName(),
                cust.getOrderDirectoryList().get(i).getFeedbackComment(),
                cust.getOrderDirectoryList().get(i).getComment()
            });
        }

    }

    public void populateRequestTable() {
        for (int i = 0; i < ecosystem.getRestaurantDirectory().getRestaurantList().size(); i++) {
            model.addRow(new Object[]{
                ecosystem.getRestaurantDirectory().getRestaurantList().get(i).getName(),
                ecosystem.getRestaurantDirectory().getRestaurantList().get(i).getLocation(),
                ecosystem.getRestaurantDirectory().getRestaurantList().get(i).getPhone(),});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        restListTable = new javax.swing.JTable();
        SelectRestBtn = new javax.swing.JButton();
        enterpriseLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        FeedbackBtn = new javax.swing.JButton();
        FeedbackTxt = new javax.swing.JTextField();

        setBackground(new java.awt.Color(240, 248, 255));

        restListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Location", "Phone No", "Title 4"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(restListTable);
        if (restListTable.getColumnModel().getColumnCount() > 0) {
            restListTable.getColumnModel().getColumn(0).setResizable(false);
            restListTable.getColumnModel().getColumn(1).setResizable(false);
            restListTable.getColumnModel().getColumn(2).setResizable(false);
            restListTable.getColumnModel().getColumn(3).setResizable(false);
        }

        SelectRestBtn.setBackground(new java.awt.Color(0, 83, 170));
        SelectRestBtn.setForeground(new java.awt.Color(255, 255, 255));
        SelectRestBtn.setText("Select Restaurant");
        SelectRestBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectRestBtnActionPerformed(evt);
            }
        });

        enterpriseLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        enterpriseLabel.setForeground(new java.awt.Color(0, 83, 170));
        enterpriseLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        enterpriseLabel.setText("Restaurant List");

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Status", "Restaurant Name", "Delivery Name", "Comment", "FeedBack"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderTable);
        if (orderTable.getColumnModel().getColumnCount() > 0) {
            orderTable.getColumnModel().getColumn(0).setResizable(false);
            orderTable.getColumnModel().getColumn(1).setResizable(false);
            orderTable.getColumnModel().getColumn(2).setResizable(false);
            orderTable.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 83, 170));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("View Orders");

        title.setBackground(new java.awt.Color(255, 51, 0));
        title.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        title.setForeground(new java.awt.Color(0, 83, 170));
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Welcome to Foodie");

        FeedbackBtn.setBackground(new java.awt.Color(0, 83, 170));
        FeedbackBtn.setForeground(new java.awt.Color(255, 255, 255));
        FeedbackBtn.setText("Feedback");
        FeedbackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FeedbackBtnActionPerformed(evt);
            }
        });

        FeedbackTxt.setForeground(new java.awt.Color(72, 72, 72));
        FeedbackTxt.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
                        .addComponent(enterpriseLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(SelectRestBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(FeedbackTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(FeedbackBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 16, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SelectRestBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(FeedbackBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(FeedbackTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void SelectRestBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectRestBtnActionPerformed

        if (restListTable.getSelectedRow() >= 0) {
            CustomerSelectOrder mm = new CustomerSelectOrder(userProcessContainer, this.userAccount, ecosystem, ecosystem.getRestaurantDirectory().getRestaurantList().get(restListTable.getSelectedRow()));
            userProcessContainer.add("manageNetworkJPanel", mm);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a restaurant","Error message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_SelectRestBtnActionPerformed

    private void FeedbackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FeedbackBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = orderTable.getSelectedRow();
        if(selectedRow < 0 || !"Delivered".equals(cust.getOrderDirectoryList().get(selectedRow).getStatus())){
            JOptionPane.showMessageDialog(this, "Please select a order from table","Error message", JOptionPane.ERROR_MESSAGE);
            return;
        }else{
            if(FeedbackTxt.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(this, "Feedback cannot be empty","Error message", JOptionPane.ERROR_MESSAGE);
            return;
            }
            cust.getOrderDirectoryList().get(selectedRow).setFeedbackComment(FeedbackTxt.getText());
            JOptionPane.showMessageDialog(this, "Feedback added Successfully");
            FeedbackTxt.setText("");
            populateCustomerOrders();
        }
    }//GEN-LAST:event_FeedbackBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton FeedbackBtn;
    private javax.swing.JTextField FeedbackTxt;
    private javax.swing.JButton SelectRestBtn;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderTable;
    private javax.swing.JTable restListTable;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
