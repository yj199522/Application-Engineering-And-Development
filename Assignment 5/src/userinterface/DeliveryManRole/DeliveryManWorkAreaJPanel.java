/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DeliveryManRole;

import Business.DeliveryMan.DeliveryMan;
import Business.EcoSystem;
import Business.Orders.Order;
import Business.Orders.OrderDirectory;

import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class DeliveryManWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem ecosystem;
    private UserAccount userAccount;
    DefaultTableModel model;
    DefaultTableModel ordersModel;
    private OrderDirectory selectedDir;
    private DeliveryMan deliveryMan;
    
    
    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public DeliveryManWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        ecosystem = business;
        model = new DefaultTableModel();
        ordersModel = new DefaultTableModel();
        orderTable.setModel(model);
        orderListTable.setModel(ordersModel);
        orderTable.setVisible(false); 
//        model.
        processJButton.setVisible(false); 
        model.addColumn("Item");
        model.addColumn("Price");
        model.addColumn("Quantity");
        model.addColumn("Customer Name");
        model.addColumn("Resturant Name");
        ordersModel.addColumn("Id");
        ordersModel.addColumn("Status");        
        ordersModel.addColumn("Customer name");
        ordersModel.addColumn("Customer Comment");
        this.deliveryMan = findDeliveryMan(account);
        populateTable();
    }
    public DeliveryMan findDeliveryMan(UserAccount account) {
        for(int i = 0; i < ecosystem.getDeliveryManDirectory().getDeliverymanList().size(); i ++) {
            if(ecosystem.getDeliveryManDirectory().getDeliverymanList().get(i).getAccountDetails().getUsername().equals(account.getUsername())) {
                return ecosystem.getDeliveryManDirectory().getDeliverymanList().get(i);
            }
        }
        return null;
    }
    public void populateTable(){
        String name = "";
        for (int i = ordersModel.getRowCount() - 1; i >= 0; i--) {
            ordersModel.removeRow(i);
        }
        for (int i = 0; i < deliveryMan.getOrderList().size(); i ++) {
             for (int j = 0; j < deliveryMan.getOrderList().get(i).getOrderList().size(); j++) {
                    name = deliveryMan.getOrderList().get(i).getCustomerDetails().getUsername();
                }
            ordersModel.addRow(new Object[]{
                    i,
                    deliveryMan.getOrderList().get(i).getStatus(),
                    name,
                    deliveryMan.getOrderList().get(i).getComment()
                });
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        pickUpButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderListTable = new javax.swing.JTable();
        title = new javax.swing.JLabel();

        setBackground(new java.awt.Color(240, 248, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Price", "Quantity", "Customer Name", "Resturant Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(orderTable);
        if (orderTable.getColumnModel().getColumnCount() > 0) {
            orderTable.getColumnModel().getColumn(0).setResizable(false);
            orderTable.getColumnModel().getColumn(1).setResizable(false);
            orderTable.getColumnModel().getColumn(2).setResizable(false);
            orderTable.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 290, 490, 96));

        pickUpButton.setBackground(new java.awt.Color(0, 83, 170));
        pickUpButton.setForeground(new java.awt.Color(255, 255, 255));
        pickUpButton.setText("View Order");
        pickUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickUpButtonActionPerformed(evt);
            }
        });
        add(pickUpButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 220, 170, 40));

        processJButton.setBackground(new java.awt.Color(0, 83, 170));
        processJButton.setForeground(new java.awt.Color(255, 255, 255));
        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });
        add(processJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 400, 160, 40));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 83, 170));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("My Orders");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 70, 480, -1));

        orderListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Status", "Customer Name", "Comment"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderListTable);
        if (orderListTable.getColumnModel().getColumnCount() > 0) {
            orderListTable.getColumnModel().getColumn(0).setResizable(false);
            orderListTable.getColumnModel().getColumn(1).setResizable(false);
            orderListTable.getColumnModel().getColumn(2).setResizable(false);
            orderListTable.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 100, 490, 96));

        title.setBackground(new java.awt.Color(255, 51, 0));
        title.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        title.setForeground(new java.awt.Color(0, 83, 170));
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Welcome to Foodie");
        add(title, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 680, 50));
    }// </editor-fold>//GEN-END:initComponents

    private void pickUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickUpButtonActionPerformed
        orderTable.setVisible(true);
        int selectedRow = orderListTable.getSelectedRow();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null,"select a row", "Error message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        orderTable.setVisible(true);
        processJButton.setVisible(true);
        String a = String.valueOf(ordersModel.getValueAt(orderListTable.getSelectedRow(), 1));
        for (int i = model.getRowCount() - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        selectedDir = deliveryMan.getOrderList().get(orderListTable.getSelectedRow());
        ArrayList<Order> orderlist = deliveryMan.getOrderList().get(orderListTable.getSelectedRow()).getOrderList();
        for (int i = 0; i < orderlist.size(); i++) {
            model.addRow(new Object[]{
                orderlist.get(i).getItem(),
                orderlist.get(i).getPrice(),
                orderlist.get(i).getQuantity(),
                selectedDir.getCustomerDetails().getUsername(),
                selectedDir.getRestaurant().getName()
            });
        }
    }//GEN-LAST:event_pickUpButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed
        int selectedRow = orderListTable.getSelectedRow();
        if("Delivered".equals(deliveryMan.getOrderList().get(selectedRow).getStatus())){
            JOptionPane.showMessageDialog(null,"Order Already Delivered. Please select other order.", "Error message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        DeliveryStatus deliveryStatus = new DeliveryStatus(userProcessContainer, ecosystem, selectedDir, deliveryMan);
        userProcessContainer.add("processWorkRequestJPanel", deliveryStatus);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        
    }//GEN-LAST:event_processJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderListTable;
    private javax.swing.JTable orderTable;
    private javax.swing.JButton pickUpButton;
    private javax.swing.JButton processJButton;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
